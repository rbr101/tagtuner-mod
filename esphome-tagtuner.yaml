globals:
  - id: idle_timer
    type: int
    restore_value: no  # Do not attempt to restore the value as a string
    initial_value: '0' # Initialize as a string for compatibility
  - id: idle_timeout
    type: int
    restore_value: no
    initial_value: '300'  # 5 minutes in seconds
  # - id: volume_level
  #   type: float
  #   initial_value: '0.5'  # Default value for volume level (0.0 - 1.0)

api:
  encryption:
    key: some_key
  services:    
    - service: set_player_state
      variables:
        state: string
        player: string
        volume: float
      then:
        - lambda: |-
            id(player_state).publish_state(state);
            id(media_player).publish_state(player);
            id(volume_level).publish_state(volume * 10);
            id(idle_timer) = 0;  // Reset the idle timer
            id(reset_idle_timer).execute();  // Call the script
    - service: set_media_info
      variables:
        title: string
        artist: string
        album: string
      then:
        - lambda: |-
            id(media_title).publish_state(title);
            id(media_artist).publish_state(artist);
            id(media_album).publish_state(album);
            id(idle_timer) = 0;  // Reset the idle timer
            id(reset_idle_timer).execute();  // Call the script

number:
  - platform: template
    name: "Volume Level"
    id: volume_level
    min_value: 0           # Minimum value (e.g., volume can't be less than 0)
    max_value: 1        # Maximum value (e.g., volume can't exceed 100)
    step: 0.01                # Step size for increment/decrement
    optimistic: true
    internal: true         # Optional: Whether to assume the state when not

# Text Sensors for Media Info
text_sensor:
  - platform: template
    name: "Player state"
    id: player_state
    update_interval: never
    icon: mdi:folder-music-outline
    internal: true
  - platform: template
    name: "Media Title"
    id: media_title
    update_interval: never
    icon: mdi:folder-music-outline
    internal: true
  - platform: template
    name: "Media Artist"
    id: media_artist
    update_interval: never
    icon: mdi:account-music
    internal: true
  - platform: template
    name: "Media Player"
    id: media_player
    update_interval: never
    icon: mdi:disc-player
    internal: true
  - platform: template
    name: "Media Album"
    id: media_album
    update_interval: never
    icon: mdi:album
    internal: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: NONE 

substitutions:
  name: esphome-tagreader2
  friendly_name: tagreader2
  
packages:
  project: github://luka6000/TagTuner/tagtuner-project.yaml@main
  core-nfc: github://luka6000/TagTuner/tagtuner-core-nfc.yaml@main
  core-comms: github://luka6000/TagTuner/tagtuner-core-comms.yaml@main
  # core-nfc: !include tagtuner-core-nfc.yaml
  # core-comms: !include tagtuner-core-comms.yaml

# improv_serial:

esphome:
  name: "${name}"
  friendly_name: ${friendly_name}
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: false

  # hello world
  on_boot:
    priority: -100
    then:
    - light.turn_on:
        id: led1
        effect: TagWrite
    - delay: 1000ms
    - light.turn_off: led1
    - wait_until:
        condition:
          api.connected:
        timeout: 20s
    - text_sensor.template.publish:
        id: status
        state: "Ready"
    - script.execute: reset_idle_timer

esp32:
  board: wemos_d1_mini32
  framework:
    type: esp-idf

# To be able to get logs from the device via serial and api.
logger:
  #level: VERBOSE
  level: DEBUG
  # level: WARN
  logs:
    light: WARN
    # pn532: DEBUG
    # pn532_i2c: DEBUG
    # Disable message casued by the display
    component: ERROR

# i2c for NFC reader
i2c:
  id: bus_i2c
  sda: 21
  scl: 22
  scan: False
  frequency: 400kHz
  timeout: 50ms
  # timeout: 13ms #to prevent pn532 timeout

# SPI for display
spi:
  clk_pin: GPIO14
  mosi_pin: GPIO04
  interface: hardware

binary_sensor:
  - platform: gpio
    id: toggle
    pin:
      number: 23
      inverted: true
      mode:
        input: true
        pullup: true
    on_multi_click:
    - timing:
        - ON for at most 1s
        - OFF for at most 0.35s
        - ON for at most 1s
        - OFF for at most 0.35s
        - ON for at most 1s
      then:
        - script.execute: reset_idle_timer
        # - script.execute: led_blink
        - logger.log: "Triple Clicked"
        - text_sensor.template.publish:
            id: status
            state: "clickTriple"
        - script.execute:
            id: action_event
            action: "clickTriple"
    - timing:
        - ON for at most 1s
        - OFF for at most 0.35s
        - ON for at most 1s
        - OFF for at least 0.45s
      then:
        - script.execute: reset_idle_timer
        # - script.execute: led_blink
        - logger.log: "Double Clicked"
        - text_sensor.template.publish:
            id: status
            state: "clickDouble"
        - script.execute:
            id: action_event
            action: "clickDouble"
    - timing:
        - ON for 0.5s to 2s
        - OFF for at least 50ms
      then:
        - script.execute: reset_idle_timer
        # - script.execute: led_blink
        - logger.log: "Single Long Clicked"
        - text_sensor.template.publish:
            id: status
            state: "clickLong"
        - script.execute:
            id: action_event
            action: "clickLong"
    - timing:
        - ON for at most 0.5s
        - OFF for at least 360ms
      then:
        - script.execute: reset_idle_timer
        # - script.execute: led_blink
        - logger.log: "Single Short Clicked"
        - text_sensor.template.publish:
            id: status
            state: "clickSingle"
        - script.execute:
            id: tagtuner_event
            action: "clickSingle"
            uid: ""
            uri: ""
            artist: ""
            playlist: ""

output:
  - platform: gpio
    pin: 2
    id: led1_gpio
  # - platform: gpio
  #   id: backlight
  #   pin:
  #     number: GPIO12
  #     inverted: false 
  - platform: ledc
    pin: GPIO12
    id: backlight

light:
  - platform: binary
    id: led1
    output: led1_gpio
    restore_mode: ALWAYS_OFF
    effects:
      - strobe:
          name: TagWrite
          colors:
            - state: true
              duration: 250ms
            - state: false
              duration: 50ms

  - platform: monochromatic
    output: backlight
    name: "Display"
    id: backlightscreen

script:
  - id: led_blink
    then:
    - light.turn_off: led1
    - light.turn_on:
        id: led1
        flash_length: 100ms
  - id: led_ok
    then:
    - light.turn_off: led1
    - light.turn_on:
        id: led1
        flash_length: 50ms
    - delay: 100ms
    - light.turn_on:
        id: led1
        flash_length: 50ms
  - id: led_success
    then:
    - light.turn_off: led1
    - light.turn_on:
        id: led1
        flash_length: 200ms
    - delay: 250ms
    - light.turn_on:
        id: led1
        flash_length: 200ms
    - delay: 250ms
    - light.turn_on:
        id: led1
        flash_length: 500ms
  - id: led_tagwrite
    then:
    - light.turn_on:
        id: led1
        effect: TagWrite
  # Code for the display power
  - id: check_idle_timeout
    then:
      - if:
          condition:
            lambda: 'return id(idle_timer) >= id(idle_timeout);'
          then:
            - light.turn_off:
                id: backlightscreen
          else:
            - lambda: |-
                id(idle_timer) += 1;  // Increment the idle timer
  - id: reset_idle_timer
    then:
      - globals.set:
          id: idle_timer
          value: '0'
      - light.turn_on:
          id: backlightscreen

sensor:
  - platform: rotary_encoder
    id: rotary
    pin_a: 18
    pin_b: 19
    on_clockwise:
      - text_sensor.template.publish:
          id: status
          state: "Volume up"
      - script.execute: reset_idle_timer
      - script.execute:
          id: tagtuner_event
          action: "volumeUp"
          uid: ""
          uri: ""
          artist: ""
          playlist: ""
      # - script.execute: led_blink
    on_anticlockwise:
      - script.execute: reset_idle_timer
      - text_sensor.template.publish:
          id: status
          state: "Volume down"
      - script.execute:
          id: tagtuner_event
          action: "volumeDown"
          uid: ""
          uri: ""
          artist: ""
          playlist: ""
      # - script.execute: led_blink

switch:
   # Debug switch
  - platform: template
    name: "Show Debug"
    id: showdebug
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true  # Allows state changes without explicit actions
    # Display switch
  # - platform: template
  #   name: "Display Power Control"
  #   id: display_power
  #   optimistic: true
  #   restore_mode: RESTORE_DEFAULT_OFF

font:
  - file: "gfonts://Roboto+Condensed"
    id: small_font
    size: 15
  - file: "gfonts://Roboto+Condensed"
    id: medium_font
    size: 24
  - file: "gfonts://Roboto"
    id: large_font
    size: 30

image:
  - file: "images/vinyl.png"
    id: vinyl
    resize: 180x180
    transparency: opaque
    type: RGB
  - file: "images/Vinyl-purple.png"
    id: vinyl_0
    resize: 150x150
    transparency: opaque
    type: RGB
  - file: "images/Vinyl-purple_90.png"
    id: vinyl_1
    resize: 150x150
    transparency: opaque
    type: RGB
  - file: "images/Vinyl-purple_180.png"
    id: vinyl_2
    resize: 150x150
    transparency: opaque
    type: RGB
  - file: "images/Vinyl-purple_270.png"
    id: vinyl_3
    resize: 150x150
    transparency: opaque
    type: RGB
  - file: mdi:album
    id: mdi_album
    resize: 160x160
    type: RGB
  - file: mdi:pause
    id: mdi_pause
    resize: 80x80
    type: RGB
  - file: mdi:record-player
    id: mdi_recordplayer
    resize: 180x180
    type: RGB
  - file: mdi:skip-next
    id: mdi_next
    resize: 80x80
    type: RGB
  - file: mdi:skip-previous
    id: mdi_prev
    resize: 80x80
    type: RGB
  - file: mdi:volume-mute
    id: mdi_mute
    resize: 40x40
    type: RGB  


color:
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_purple
    red: 100%
    green: 0%
    blue: 100%
  - id: my_orange
    red: 70%
    green: 50%
    blue: 0%
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%     

interval:
  - interval: 1s
    then:
      - script.execute: check_idle_timeout


display:
  - platform: st7789v
    model: Custom
    update_interval: 1000ms
    rotation: 180
    height: 240
    offset_height: 0
    width: 240
    offset_width: 0
    # backlight_pin: GPIO12
    # cs_pin: GPIO05
    dc_pin: GPIO16
    spi_mode: mode2
    reset_pin: GPIO13
    eightbitcolor: true
    lambda: |-
      // First check if the blacklight is on
      if (id(backlightscreen).current_values.is_on()) {
      const int line_height = 24;  // Height of each text line (depends on font size)
      int cursor_y = 0;  // Start at the top of the screen

      // Image cycling logic
      static int image_index = 0;  // Current image index (0 to 3)
      image_index = (image_index + 1) % 4;  // Cycle through 4 images

      // Define the image IDs in an array
      static const auto images = std::array<std::reference_wrapper<const decltype(id(vinyl))>, 4>{
        id(vinyl_0),
        id(vinyl_1),
        id(vinyl_2),
        id(vinyl_3)
      };


      if (id(player_state).state == "playing" || id(player_state).state == "paused") {
        // Display the album name (first 24 characters only)
        std::string album = id(media_album).state;
        if (album.empty()) {
          album = "Unknown Album";
        }
        it.printf(0, cursor_y, id(large_font), id(my_yellow), album.c_str());
        cursor_y += 35;

        // Display the artist name (first 24 characters only)
        std::string artist = id(media_artist).state;
        if (artist.empty()) {
          artist = "Unknown Artist";
        }
        it.printf(0, cursor_y, id(medium_font), id(my_yellow), artist.c_str());
        cursor_y += line_height;

        // Display the title name (first 24 characters only)
        std::string title = id(media_title).state;
        if (title.empty()) {
          title = "No Media Playing";
        }
        it.printf(0, cursor_y, id(medium_font), title.c_str());

      } else  {

          if (id(status).state == "Plain UID tag"){
            it.printf(0, cursor_y, id(large_font), id(my_yellow), "Loading ....");
            it.image(30, 50, id(mdi_recordplayer), id(my_orange));
            }
          else if (id(status).state == "Tag removed"){
            it.printf(0, cursor_y, id(large_font), id(my_yellow), "Plaat verwijderd");
            }
          else {
            if (!id(status).state.empty()) {
              it.printf(0, cursor_y, id(large_font), id(my_yellow), "Voer een plaat in");
              it.image(30, 50, id(vinyl));
              }
            else {
              it.printf(0, cursor_y, id(large_font), id(my_yellow), "Starting ....");
             }
            }
      }
      //Show image when state is playing
      if (id(player_state).state == "playing" && id(status).state.find("click") == std::string::npos) {
            // Display the current image in the cycle
            it.image(45, 90, images[image_index]);
      }
      // Show Pause state
      if (id(player_state).state == "paused" || id(status).state == "clickDouble") {
        it.image(80, 110, id(mdi_pause), id(my_red));
      }
      // Show rotary clicks
      if (id(status).state == "clickSingle") {
        it.image(80, 110, id(mdi_next), id(my_blue));       
      }
      if (id(status).state == "clickTriple") {
        it.image(80, 110, id(mdi_prev), id(my_blue));       
      }
      if (id(status).state == "clickLong") {
        it.image(200, 200, id(mdi_mute), id(my_red));       
      }

      // Show debug information if the switch is enabled
      if (id(showdebug).state) {
        it.printf(0, 225, id(small_font), id(status).state.c_str());
      }

      //Show volume Level
      //it.printf(210, 216, id(medium_font), id(my_yellow), "%.1f", id(volume_level).state);
      if (id(volume_level).state != 0){
      it.printf(240, 216, id(medium_font), id(my_yellow), TextAlign::RIGHT, "%.1f", id(volume_level).state);
      }


      //end display sleep
      }
